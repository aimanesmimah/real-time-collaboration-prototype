#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('maincollaborationprojectmysql:server');
var http = require('http');

var Sharedb = require('sharedb');
var ShareDBRedis = require('sharedb-redis-pubsub');
var WebSocket = require('ws');
var WebSocketJsonStream = require('websocket-json-stream');
var redis = require('redis');
var redisFunctions  = require('../redis/redisFunctions');
var async = require('async');
var asyncLoop  = require('node-async-loop');
var seq = require('../models/sequelizeConnection');
var Document = require('../models/document')(seq);




var share = new Sharedb({
    pubsub : new ShareDBRedis({
        client : redis.createClient(6379,'localhost'),
        observer : redis.createClient(6379,'localhost')
    })
});
var connection = share.connect();
var sharePS =share.pubsub ;

var mysqlStore = require('../mysql/mysql')(sharePS.client,redisFunctions);

/*setInterval(function () {
    console.log('active docs');
    redisFunctions.getActiveDocs(sharePS.client,function (err,activeDocs) {
        console.log(activeDocs);
    });
},10000);*/

sharePS.subscribe("ffff",function (d,stream) {
    if(d)
        console.log(d);
    console.log("fff : " );
    sharePS.subscribe("operationProcess",function (op,stream) {
        if(op)
            console.log(op);
        console.log("subscribed to operationProcess channel...");

        sharePS.subscribe('linesProcess',function (li,stream) {
            if(li)
                console.log(li);

            console.log('subscribed to linesProcess channel...');
        });
    })
});

sharePS.observer.on("message",function (channel,msg) {

    var newMSG = JSON.parse(msg);

        if (!newMSG.create) {
            console.log("message received...");
            console.log("channel : " + channel + " | message :" + msg);
            console.log(msg);
            redisFunctions.addNewOperation(sharePS.client, newMSG, function (opId) {
                console.log("operation : " + opId + " added successfully");
            });

            redisFunctions.setLine(sharePS.client,newMSG,function () {
                console.log("line/lines were being set" );
            });


            sharePS.client.set("channel", channel, function (err, reply) {
                if (err)
                    throw err;
                console.log(reply);
            });

            console.log('redis on message');
        }

});


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '7000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io').listen(server);
var socketioStuff = require('../socket/socketio')(io,sharePS,connection,redisFunctions);

// Create initial document then fire callback
/*function createDoc(connection,id) {
    //var connection = backend.connect();
    var doc = connection.get("codepad", id);
    doc.fetch(function(err) {
        if (err) throw err;
        if (doc.type === null) {
            Document.getDocById(id,function (document) {
                document.content != null ? doc.create({"code":  document.content.toString()}) : doc.create({"code" : ""});
                console.log('doc created');
            });
        }

        return;

    });
}*/

//socket stuff
/*io.on('connection',function (socketio) {
    console.log('a user connected');
    console.log(socketio.id);

    socketio.on('editorSynchronized',function (data) {
        createDoc(connection,data.editorId);
        io.sockets.connected[socketio.id].emit('sharedbDocCreated');
    });


    socketio.on('editorBlur',function (data) {
        console.log('user blur : ' + data.user);
    });

    socketio.on('foc',function (data) {
        console.log('user ' + data.user + ' is focusing on writing');

        //for(var prop in sharePS)
        //  console.log(prop + " :" + sharePS[prop]);


        console.log("subscribed : " + JSON.stringify(sharePS.subscribed));
        //console.log("client : " + JSON.stringify(sharePS.client));


        //io.sockets.connected[socketio.id].emit('my message');
        socketio.broadcast.emit('focUser',{user : data.user});
    });

    socketio.on('operation',function (data) {
        //console.log("operation :" + JSON.stringify(data.operation));
        console.log("socket on message");
        console.log("data :" + JSON.stringify(data));
        console.log("oppopopop sending.....");
        var linesReadOnly = [];
        var loopArray = [];
        for(var i = 0 ; i <= data.linesNumber ; i++){
            loopArray.push(i);
        }

        asyncLoop(loopArray,function (item,next) {
            redisFunctions.getLineState(sharePS.client,data.doc,item,function (err,lineState) {
                if(lineState == 'exists')
                    linesReadOnly.push(item);

                next();
            });
        }, function (err) {
            if(err){
                console.log('Error : ' + err.message);
                return;
            }

            console.log("finished");
            console.log(linesReadOnly);
            socketio.broadcast.emit('linesReadOnly',{linesReadonly : linesReadOnly , room : data.room , user : data.user});
        });


    });

    socketio.on('mouse-activity',function (data) {
        //console.log(data);
        var coords = { x : data.x , y : data.y};
        socketio.broadcast.emit('all-mouse-activity',{sessionId : data.user , user : data.user,
            project : data.project , coords : coords  });
    });

    socketio.on('user',function (data) {
        socketio.username = data.user ;
        socketio.broadcast.emit('new',{user : data.user , project : data.project});
    });
    //socket.broadcast.emit('connect',{})
    socketio.on('userQuit',function (data) {


        //console.log(socket.res);
        console.log('one user quit');
        //console.log(socket);

        socketio.broadcast.emit('userHasQuit',{user : data.user , project : data.project});
    });

    socketio.on('colAdded',function (data) {
        console.log(data.user);
        socketio.broadcast.emit('newCol',{user : data.user , project : data.project });
    });



});*/




// Connect any incoming WebSocket connection to ShareDB
var wss = new WebSocket.Server({server: server});
wss.on('connection', function(ws, req) {
    var stream = new WebSocketJsonStream(ws);
    var id = ws.upgradeReq.headers['sec-websocket-key'];
    console.log("websocket id : "  + id);
    ws.on('message',function (data) {
        var obj = JSON.parse(data);
    });
    ws.on('close',function () {
        console.log("client : " + id + " is disconnected");
    });
    share.listen(stream);
});



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

